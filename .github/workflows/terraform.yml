name: 'Terraform CI/CD'

on:
  push:
    branches:
      - dev
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    branches:
      - stage
      - prod

permissions:
  id-token: write
  issues: write
  pull-requests: write
  contents: read

jobs:
  terraform-tests:
    name: 'Terraform Tests and Merge to Stage'
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v2

      - name: 'Terraform Format'
        run: terraform fmt -check -recursive

      - name: 'Terraform Init'
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: 'Terraform Validate'
        run: terraform validate

      - uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: latest

      - name: 'Terraform Plan'
        run: terraform plan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: 'Force Merge dev into stage if test passed'
        if: success()
        env:
          GIT_PAT: ${{ secrets.GIT_PAT }}
        run: |
          git config --global user.name 'jenserling'
          git config --global user.email 'jensebra.stud.ntnu.no'
          git fetch origin stage:stage
          git checkout stage
          git merge --no-ff --allow-unrelated-histories -X theirs dev -m "Merging dev into stage [skip ci]"
          git push https://x-access-token:${{ secrets.GIT_PAT }}@github.com/jenserling/iac-oppgave2 HEAD:stage
        
        
  stage-approval:
    name: 'Wait for Stage Approval'
    if: github.ref == 'refs/heads/stage' && github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'stage-approved'
    runs-on: ubuntu-latest
    needs: terraform-tests

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: 'Merge Stage to Prod with Manual Approval'
        env:
          GIT_PAT: ${{ secrets.GIT_PAT }}
        run: |
          git config --global user.name 'jenserling'
          git config --global user.email 'jensebra.stud.ntnu.no'
          git fetch origin prod:prod
          git checkout prod
          git merge --no-ff stage -m "Merging stage into prod after approval [skip ci]"
          git push https://${{ secrets.GIT_PAT }}@github.com/jenserling/iac-oppgave2 HEAD:prod
          
  prod-deployment:
    name: 'Production Deployment'
    if: github.ref == 'refs/heads/prod'
    runs-on: ubuntu-latest
    needs: stage-approval

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: 'Terraform Apply for Prod'
        run: terraform apply -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}